<?php

/**
 * @file holding.module
 *
 * Show a holding page for the specified sites.
 * Example: you wish to develop your site at example.com, while showing a holding page or site
 * to the public.
 * Access Drupal with the IP address to bypass holding completely.
 * If you are on a multisite installation you can specify which domains show holding pages.
 * Access to /user and /admin is always allowed (though the rest of Drupal may of course deny permission).
 */

/**
 * Implementation of hook_boot().
 *
 * Show the holding page if needed.
 */
function holding_boot() {
  // Allow logged in users through.
  global $user;
  if ($user->uid) {
    return;
  }
  
  // Allow cron through
  if (basename($_SERVER['REQUEST_URI']) == 'cron.php') {
    return;
  }  

  // Allow drush through
  if (php_sapi_name() == 'cli' || (is_numeric($_SERVER['argc']) && $_SERVER['argc'] > 0)) {
    return;
  }

  // Allow login and admin, otherwise you could totally lock yourself out.
  if (!empty($_GET['q'])) {
    list($path_base, ) = explode('/', $_GET['q']);
    if (in_array($path_base, array('admin', 'user'))) {
      return;
    }
  }

  // Now check the requested site.
  $site = substr(conf_path(), 6);
  $holding_sites = unserialize(variable_get('holding_sites', ''));
  #print_r($holding_sites);

  if (is_array($holding_sites) && in_array($site, $holding_sites)) {
    $holding_page = variable_get('holding_page', '');

    if (!$holding_page) {
      drupal_set_message(t('No holding page has been set.'), 'warning');
      return;
    }

    drupal_page_header();
    $output = file_get_contents($holding_page);
    print $output;

    exit;
  }
}

/**
 * Implementation of hook_menu().
 */
function holding_menu() {
  $items['admin/config/development/holding'] = array(
    'title' => 'Holding page',
    'description' => 'Settings for the site domain holding page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('holding_admin'),
    'access arguments' => array('administer system'),
    'type' => MENU_NORMAL_ITEM, // One of MENU_NORMAL_ITEM / MENU_CALLBACK / MENU_SUGGESTED_ITEM / MENU_LOCAL_TASK / MENU_DEFAULT_LOCAL_TASK
  );
  return $items;
}

/**
 * Admin settings form.
 */
function holding_admin($form_state) {
  $form['holding_sites'] = array(
    '#type' => 'textarea',
    '#title' => t('Holding sites'),
    '#description' => t("List of site URLs, one per line. On a single site installation, use 'default'."),
    '#default_value' => implode("\n", unserialize(variable_get('holding_sites', serialize(array())))),
  );
  
  $form['holding_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to holding page'),
    '#description' => t("Drupal-relative path to your holding page. This must be the exact file name; no directory indexing. The path will not be visible to visitors. Examples: 'holding/index.html', 'sites/all/themes/YOURTHEME/holding/index.html'"),
    '#default_value' => variable_get('holding_page', ''),
  );

  $form['#submit'][] = 'holding_admin_submit';
  
  // automatic_defaults FALSE because we have to unserialize the sites.
  return system_settings_form($form, FALSE);
}

/**
 * Admin settings form validation.
 *
 * Check the holding page file and site folders exist.
 */
function holding_admin_validate($form_id, &$form_state) {
  // Check the holding page exists as a file.
  if (!file_exists($form_state['values']['holding_page'])) {
    form_set_error('holding_page', t('The file @file does not exist.', array('@file' => check_plain($form_state['values']['holding_page']))));
  }

  // Check each of the site folders exists in /sites.
  $sites = array_map('trim', explode("\n", $form_state['values']['holding_sites']));
  $bad_sites = array();
  foreach ($sites as $conf_dir) {
    if (!file_exists('sites/' . $conf_dir)) {
      // Can't set form_set_error on each one here: @see <http://drupal.org/node/549020>
      $bad_sites[] = check_plain($conf_dir);
    }
  }
  if (count($bad_sites)) {
    form_set_error('holding_sites', t('The following directories do not exist: ') . implode(', ', $bad_sites));
  }
}

/**
 * Admin settings form submit.
 *
 * Act before system_settings_form_submit() and turn the submitted sites list into a serialized array.
 */
function holding_admin_submit($form_id, &$form_state) {
  # cookie if you can tell me why explode leaves a damn \n at the end of the lines:
  # print "<pre> >>sites[0]<< </pre>";
  $sites = array_map('trim', explode("\n", $form_state['values']['holding_sites']));
  $form_state['values']['holding_sites'] = serialize($sites);
}
